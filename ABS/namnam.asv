clc
clear all


decelLimLCW = -200;
decelLimHCW = -150;
bestGain_lcw = NaN;
bestGain_hcw = NaN;
optimalFactor = 0.01;
initialSpeeds = randi([20, 60], 1, numSteps);
totalCollision = inf;

% Markov Chain
P = [0.6 0.4; 0.85 0.15];
mc = dtmc(P);
scenario = simulate(mc,numSteps); % 2 is HCW, 1 is LCW


%% User 3 Profile - LCW

user3_HR_LCW = 61;
user3_std_HR_LCW = 14;
user3_RR_LCW = 17;
user3_std_RR_LCW = 8;

HR_samples_LCW_user3 = normrnd(user3_HR_LCW, user3_std_HR_LCW, numSamples, 1);
RR_samples_LCW_user3 = normrnd(user3_RR_LCW, user3_std_RR_LCW, numSamples, 1);
Rq_LCW_user3 = HR_samples_LCW_user3 ./ RR_samples_LCW_user3;
tr_LCW_user3 = optimalFactor * Rq_LCW_user3;


%% User 3 Profile - HCW

user3_HR_HCW = 92;
user3_std_HR_HCW = 23; 
user3_RR_HCW = 26;
user3_std_RR_HCW = 16;

HR_samples_HCW_user3 = normrnd(user3_HR_HCW, user3_std_HR_HCW, numSamples, 1);
RR_samples_HCW_user3 = normrnd(user3_RR_HCW, user3_std_RR_HCW, numSamples, 1);
Rq_HCW_user3 = HR_samples_HCW ./ RR_samples_HCW;
tr_HCW_user3 = optimalFactor * Rq_HCW_user3;

% Generating random samples for HR and RR for LCW (Normal Condition)
numSamples = 100;  
lcw_switch_counts = inf;
hcw_switch_counts = inf;


for gain = 10000:10000:200000
    [A,B,C,D,Kess, Kr, Ke, uD] = designControl(secureRand(),Gain);
    open_system('LaneMaintainSystem.slx')
    load_system('HumanActionModel.slx');
    switchcount_lcw = 0;  % Reset LCW switch counter for each gain value
    switchcount_hcw = 0;  % Reset HCW switch counter for each gain value
    cur_collision = 0;
    for i = 1:100
        if scenario(i)==1
            speed = initialSpeeds(i);
            tr = tr_LCW_user3(i);
            set_param('LaneMaintainSystem/VehicleKinematics/Saturation', 'LowerLimit', num2str(decelLimLCW));
            set_param('LaneMaintainSystem/VehicleKinematics/vx', 'InitialCondition', num2str(speed));
            simModel = sim('LaneMaintainSystem.slx');

            lastDistance = simModel.sx1.Data(end);
            lastTime = simModel.sx1.Time(end);
            for t = 1:length(simModel.sx1.Time)
                distance = simModel.sx1.Data(t);
                if distance > 0
                    lastTime = simModel.sx1.Time(t);
                    break; % Exit the loop as soon as distance exceeds 0
                end
            end

            set_param('HumanActionModel/Step', 'Time', num2str(tr));
            set_param('HumanActionModel/Step', 'After', num2str(decelLim_lcw*1.1));
            simModel_new_lcw = sim('HumanActionModel.slx');
            ta = simModel_new_lcw.sx1.Time(end);

            h_stop = ta + tr;
            disp("H stop for LCW is " + h_stop);

            if lastDistance >= 0
                if h_stop < lastTime
                    switchcount_lcw = switchcount_lcw + 1;
                    disp("No Collision. Switch Human")
                else
                    disp("Collision")
                    collision = collision+1;
                end
            else
                disp("No Collision.")
            end
        else
            speed = initialSpeeds(i);
            tr = tr_HCW_user3(i);
            set_param('LaneMaintainSystem/VehicleKinematics/Saturation', 'LowerLimit', num2str(decelLimHCW));
            set_param('LaneMaintainSystem/VehicleKinematics/vx', 'InitialCondition', num2str(speed));
            simModel = sim('LaneMaintainSystem.slx');

            lastDistance = simModel.sx1.Data(end);
            lastTime = simModel.sx1.Time(end);
            for t = 1:length(simModel.sx1.Time)
                distance = simModel.sx1.Data(t);
                if distance > 0
                    lastTime = simModel.sx1.Time(t);
                    break; % Exit the loop as soon as distance exceeds 0
                end
            end

            set_param('HumanActionModel/Step', 'Time', num2str(tr));
            set_param('HumanActionModel/Step', 'After', num2str(decelLim_lcw*1.1));
            simModel_new_lcw = sim('HumanActionModel.slx');
            ta = simModel_new_lcw.sx1.Time(end);

            h_stop = ta + tr;
            disp("H stop for LCW is " + h_stop);

            if lastDistance >= 0
                if h_stop < lastTime
                    switchcount_lcw = switchcount_lcw + 1;
                    disp("No Collision. Switch Human")
                else
                    disp("Collision")
                    collision = collision+1;
                end
            else
                disp("No Collision.")
            end
       end
    end

        
        
        % Check if stopping distance is greater than 0
        if dsLCW > 0
            load_system('HumanActionModel.slx');
            random_tr_LCW = tr_LCW(randi(numSamples)); % Sample a random tr from tr_LCW
            set_param('HumanActionModel/Step', 'Time', num2str(random_tr_LCW));
            set_param('HumanActionModel/Step', 'After', num2str(decelLimLCW*1.1));
            simModel_new_lcw = sim('HumanActionModel.slx');
            collisionTimeIndexLCW = find(simModel.sx1.Data > 0, 1, 'first');
            tcLCW = simModel.sx1.Time(collisionTimeIndexLCW);
            Ta_lcw = simModel_new_lcw.sx1.Time(end);
            h_stop_lcw = Ta_lcw + random_tr_LCW;
            if h_stop_lcw<tcLCW
                %disp('Switch to Human');
                switchcount_lcw = switchcount_lcw + 1;  % Increment the switch counter
            else
                %disp('Do not switch');
            end
        else
            %disp('Do not switch to Human');
        end



        open_system('LaneMaintainSystem.slx');
        set_param('LaneMaintainSystem/VehicleKinematics/Saturation', 'LowerLimit', num2str(decelLimHCW));
        set_param('LaneMaintainSystem/VehicleKinematics/vx', 'InitialCondition', num2str(InitSpeed));
        simModel = sim('LaneMaintainSystem.slx');

        lastTimeIndexHCW = numel(simModel.sx1.Time);
        lastDataIndexHCW = numel(simModel.sx1.Data);
        tsHCW = simModel.sx1.Time(lastTimeIndexHCW);
        dsHCW = simModel.sx1.Data(lastDataIndexHCW);
        

        
        
        % Check if stopping distance is greater than 0
        if dsHCW > 0
            load_system('HumanActionModel.slx');
            random_tr_HCW = tr_HCW(randi(numSamples)); % Sample a random tr from tr_HCW
            set_param('HumanActionModel/Step', 'Time', num2str(random_tr_HCW));
            set_param('HumanActionModel/Step', 'After', num2str(decelLimLCW*1.1));
            simModel_new_lcw = sim('HumanActionModel.slx');
            collisionTimeIndexHCW = find(simModel.sx1.Data > 0, 1, 'first');
            tcHCW = simModel.sx1.Time(collisionTimeIndexHCW);
            Ta_hcw = simModel_new_lcw.sx1.Time(end);
            h_stop_hcw = Ta_hcw + random_tr_HCW;
            if h_stop_hcw<tcHCW
                %disp('Switch to Human');
                switchcount_hcw = switchcount_hcw + 1;  % Increment the switch counter
            else
                %disp('Do not switch');
            end
        else
            %disp('Do not switch to Human');
        end
    end
     % Store LCW and HCW switch counts for this gain value
    lcw_switch_counts(index) = switchcount_lcw;
    hcw_switch_counts(index) = switchcount_hcw;
    
    index = index + 1;  % Increment index for the next gain value

    
end

% Find the gains with the minimum switch counts for LCW and HCW
[min_lcw_switches, lcw_index] = min(lcw_switch_counts);
[min_hcw_switches, hcw_index] = min(hcw_switch_counts);

bestGain_lcw = 10000 + (lcw_index - 1) * 10000;
bestGain_hcw = 10000 + (hcw_index - 1) * 10000;

% Display the best gain values and switch counts
disp('Average User HR LCW: ' + avgUser_HR_LCW);
disp('Average User RR LCW: ' + avgUser_RR_LCW);
disp('Average User HR HCW: ' + avgUser_HR_HCW);
disp('Average User RR HCW: ' + avgUser_RR_HCW);
disp('Average User Reaction Time Model LCW: '+ avgUser_tr_LCW);
disp('Average User Reaction Time Model HCW: '+ avgUser_tr_HCW);
disp(['Best Gain LCW: ' num2str(bestGain_lcw), '  Best Gain HCW: ' num2str(bestGain_hcw)]);
disp(['Minimum Switches LCW: ' num2str(min_lcw_switches), '  Minimum Switches HCW: ' num2str(min_hcw_switches)]);